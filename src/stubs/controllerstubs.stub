<?php

namespace @namespace;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use DB;
@use

class @class extends Controller
{
    protected $validationRule = "@validationRule";

    protected $tableFieldName = "@tableFieldName";

    protected $formDisplay = "@formDisplay";

    protected $table = "@table";

    protected $select = "@select";

    protected $join = "@join";

    protected $class = "@class";

    protected $route =  "@class";

    private function buildQuery(){
        $alias = substr($this->table,0,5);
        $id =  $alias.".id";
        $query = DB::select(DB::raw("SELECT $id,$this->select from $this->table as $alias $this->join"));
        return collect($query);
    }

    public function index(){
        $data["content"] = $this->buildQuery();
        $data["titile"] = ucwords(implode(" ",explode('_', $this->table)));
        $data["thead"] = explode(",",str_replace("'","",$this->tableFieldName));
        $viewDirectory = $this->class.".index";
        $data["script"] = $this->jScript();
        $data["route"] = $this->route;
        return view($viewDirectory, compact("data"));
    }


    public function create(){
        $viewDirectory = $this->class.".create";
        $data = $this->route.".form";
        $model = new Model();
        $action = "store";
        return view($viewDirectory,compact("data","model","action"));
    }

    public function store(Request $request){
        $request->validate($this->makeValidationRule());
        $store = Model::create($request->all());
        return back();
    }


    public function edit($id){
        $model = Model::find($id);
        $viewDirectory = $this->class.".edit";
        $data = $this->route.".form";
        $action = "update";
        return view($viewDirectory,compact("model","data","action"));
    }

    public function update(Request $request,$id){
        $request->validate($this->makeValidationRule());
        $update = Model::find($id)->update($request->all());
        return back();
    }

    public function delete($id){
        $model = Model::destroy($id);
        return back();
    }

    protected function jScript(){

    }

    protected function makeValidationRule(){
        $validationRule = $this->validationRule;
           $r = [];
        if($validationRule != ""){
            $ruleArray = explode("#",$validationRule);

            foreach($ruleArray as $rule){
            $val = explode("=>",$rule);
            $key = trim($val[0]);
            $r[$key] = trim($val[1]);
            }
        }
        return $r;
    }
}
